#include <iostream>
#include<GLUT/glut.h>
#include<GL/glut.h>
#include<stdlib.h>
#include<math.h>
using namespace std;

typedef float Matrix4 [4][4];
Matrix4 theMatrix;
static GLfloat input[8][3]=
{
    {40,40,-50},{90,40,-50},{90,90,-50},{40,90,-50},
    {30,30,0},{80,30,0},{80,80,0},{30,80,0}
};
float output[8][3];
float tx,ty,tz;
float sx,sy,sz;
float angle;
int choice, choiceRot;
void setIdentityM(Matrix$ m){
    for(int i =0;i<4;i++){
        for(int j=0;j<4;j++){
            m[i][j]=(i==j);
}
}
}
void translate(int tx,int ty,int tz){
    for(int i=0;i<8;i++){
    output[i][0]=input[i][0]+tx;
    output[i][1]+= ty;
    output[i][2]+=tz;}
    }
void scale(int sx,int sy,int sz){
theMatrix[0][0]=sx;
theMatrix[1][1]=sy;
theMatrix[2][2]=sz;
}
// ----------  void
void multiplyM(){
for(int i=0;i<8;i++){
for(intj=0;j<3;j++){
output[i][j]=0;
for(int k=0;k<3;k++){
output[i][j]=output[i][j]+ input[i][k]*theMatrix[k][j];}}}}

void Axes (void){
glColor3f(0.0,0.0,0.0);
glBegin(GL_LINES);
glVertex2s(-1000,0);
glVertex2s(1000,0);
glEnd();
glBegin(GL_LINES);
glVertex2s(0,-1000);
glVertex2s(0,1000);
glEnd();
}
void draw(float a[8][3]){
glBegin(GL_QUADS);
gl_Color3f(0.7,0.4,0.5);  //behind
glVertex3fv(a[0]);
glVertex3fv(a[1]);
glVertex3fv(a[2]);
glVertex3fv(a[3]);

gl_Color3f(0.8,0.2,0.4);  // bottom
glVertex3fv(a[0]);
glVertex3fv(a[1]);
glVertex3fv(a[5]);
glVertex3fv(a[4]);

gl_Color3f(0.3,0.6,0.7);  // left
glVertex3fv(a[0]);
glVertex3fv(a[4]);
glVertex3fv(a[7]);
glVertex3fv(a[3]);

gl_Color3f(0.2,0.8,0.2);  // right
glVertex3fv(a[1]);
glVertex3fv(a[2]);
glVertex3fv(a[6]);
glVertex3fv(a[5]);

gl_Color3f(0.7,0.7,0.2);  // up
glVertex3fv(a[2]);
glVertex3fv(a[3]);
glVertex3fv(a[7]);
glVertex3fv(a[6]);

gl_Color3f(1.0,0.1,0.1);
glVertex3fv(a[4]);
glVertex3fv(a[5]);
glVertex3fv(a[6]);
glVertex3fv(a[7]);
glEnd();
}
void init(){
    glClearColor(1.0,1.0,1.0,1.0); // backgro colorto white
    glOrtho(-454.0,454.0,-250.0,250.0,-250.0,250.0);
    glEnable(GL_DEPTH_TEST);
}
void display{
glClear(GL_COLR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
Axes();
glColor3f(1.0,0.0,0.0);
draw(input);
setIdentityM(theMatrix);
switch(choice){
case 1:
    translate(tx,ty,tz);
    break;
case 2:
    scale(sx,sy,sz);
    multiplyM();
    break;
case 3:
    switch(choiceRot){
    case 1:
        RotateX(angle);
        break;
    case 2:
        RotateY(angle);
        break;
    case 3:
    RotateZ(angle);
    break;
    default:
    break;
    }
    multiplyM();
    break;
}
draw(output);
glFlush();
}
int main(int argc, char** argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB|GLUT_DEPTH);
    glutInitWindowSize(1362,750);
    glutInitWindowPosition(0,0);
    glutCreateWindow("3d transformation");
    init();
    cout<<" enter ur choice :\n 1.translation \n 2. scaling \n 3. rotation ";
    cin>>choice;
    switch(choice):
        case 1:
            cout<<"enter tx,ty,tz"<<endl;
            cin>>tx>>ty>>tz;
        case 2:
            cout<<"enter sx,sy,sz"<<endl;
            cin>>sx>>sy>>sz;
        case 3: // Rotation
            cout<<"Enter your choice for Rotation about axis: \n 1. paralle to x axis:"<<"(y &z) \n 2.parallel to Y axis. (x& z) \n 3.parllel to Z-axis:"<<"(x& y)\n ==";
            cin>>choiceRot;
            switch (choiceRot) {
                case 1:
                    cout<<"Enter Rotation angle: ";
                    cin>>angle;
                    break;
                case 2:
                    cout<<"Enter Rotation angle: ";
                    cin>>angle;
                    break;
                case 3:
                    cout<<"Enter Rotation angle: ";
                    cin>>angle;
                    break;
                default:
                break;
        }

        break;
    }
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
